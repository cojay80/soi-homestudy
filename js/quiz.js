// js/quiz.js (ÏùåÌñ• Ìö®Í≥º Í∏∞Îä•Ïù¥ Ï∂îÍ∞ÄÎêú ÏµúÏ¢Ö Î≤ÑÏ†Ñ)

// ======== 1. HTML ÏöîÏÜå Î∞è ÏÑ§Ï†ïÍ∞í Í∞ÄÏ†∏Ïò§Í∏∞ ========
// ... (Í∏∞Ï°¥Í≥º ÎèôÏùºÌïú ÏöîÏÜåÎì§) ...
const questionText = document.querySelector('.question-text');
const answerOptions = document.querySelectorAll('.option');
const progress = document.querySelector('.progress');
const questionNumber = document.querySelector('.question-number');
const toastMessage = document.getElementById('toast-message');
const timerDisplay = document.getElementById('timer-display');
const questionImage = document.getElementById('question-image');
const quizMain = document.querySelector('.quiz-main');
const quizLayout = document.querySelector('.quiz-layout');
const resultsContainer = document.getElementById('results-container');
const passageArea = document.querySelector('.passage-area');
const passageContent = document.getElementById('passage-content');
const problemArea = document.querySelector('.problem-area');

const GOOGLE_SHEET_URL = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRdAWwA057OOm6VpUKTACcNzXnBc7XJ0JTIu1ZYYxKQRs1Fmo5UvabUx09Md39WHxHVVZlQ_F0Rw1zr/pub?output=tsv';
const selectedGrade = localStorage.getItem('selectedGrade');
const selectedSubject = localStorage.getItem('selectedSubject');
const selectedCount = parseInt(localStorage.getItem('selectedCount'));
const selectedTimer = parseInt(localStorage.getItem('selectedTimer'));
const isReviewMode = localStorage.getItem('isReviewMode') === 'true';

// ‚ñº‚ñº‚ñº‚ñº‚ñº ÏùåÌñ• Ìö®Í≥º ÌååÏùº Ï£ºÏÜå ÏÑ§Ï†ï ‚ñº‚ñº‚ñº‚ñº‚ñº
const CORRECT_SOUND_URL = 'https://raw.githubusercontent.com/cojay80/soi-homestudy/main/sound/dingdong.wav';
const INCORRECT_SOUND_URL = 'https://raw.githubusercontent.com/cojay80/soi-homestudy/main/sound/ddang.wav';
// ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤

let currentProblemSetIndex = 0;
let currentQuestionInSetIndex = 0;
let problemSets = [];
let score = 0;
let incorrectProblems = [];
let isAnswered = false;
let timerInterval;

// ======== ÏùåÌñ• Ïû¨ÏÉùÏùÑ ÏúÑÌïú Ìï®Ïàò (ÏÉàÎ°ú Ï∂îÍ∞Ä) ========
function playSound(url) {
    if (url && url.startsWith('http')) { // Ï£ºÏÜåÍ∞Ä Ïú†Ìö®Ìï† ÎïåÎßå Ïû¨ÏÉù
        const audio = new Audio(url);
        audio.play();
    }
}

// ======== ÎãµÎ≥Ä ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ (playSound Ìï®Ïàò Ìò∏Ï∂ú Ï∂îÍ∞Ä) ========
answerOptions.forEach(button => {
    button.addEventListener('click', (event) => {
        if (isAnswered) return;
        isAnswered = true;
        clearInterval(timerInterval);

        const selectedButton = event.target;
        const currentQuestion = problemSets[currentProblemSetIndex].questions[currentQuestionInSetIndex];
        const isCorrect = selectedButton.textContent === currentQuestion.Ï†ïÎãµ;

        if (isCorrect) {
            playSound(CORRECT_SOUND_URL); // <-- Ï†ïÎãµ ÏÜåÎ¶¨ Ïû¨ÏÉù
            score++;
            selectedButton.classList.add('correct-answer');
            showToast("Ï†ïÎãµÏûÖÎãàÎã§! üéâ", true);
        } else {
            playSound(INCORRECT_SOUND_URL); // <-- Ïò§Îãµ ÏÜåÎ¶¨ Ïû¨ÏÉù
            incorrectProblems.push(currentQuestion);
            selectedButton.classList.add('incorrect-answer');
            answerOptions.forEach(btn => {
                if (btn.textContent === currentQuestion.Ï†ïÎãµ) {
                    btn.classList.add('correct-answer');
                }
            });
            showToast("ÏïÑÏâ¨ÏõåÏöî, Îã§Ïùå Î¨∏Ï†úÎ°ú ÎÑòÏñ¥Í∞ëÎãàÎã§.", false);
        }

        setTimeout(goToNextQuestion, 1500);
    });
});

// ======== ÌÉÄÏù¥Î®∏ Í∏∞Îä• (playSound Ìï®Ïàò Ìò∏Ï∂ú Ï∂îÍ∞Ä) ========
function startTimer(seconds) {
    let timeLeft = seconds;
    timerDisplay.textContent = `ÎÇ®ÏùÄ ÏãúÍ∞Ñ: ${timeLeft}Ï¥à`;
    timerInterval = setInterval(() => {
        timeLeft--;
        timerDisplay.textContent = `ÎÇ®ÏùÄ ÏãúÍ∞Ñ: ${timeLeft}Ï¥à`;
        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            isAnswered = true;
            playSound(INCORRECT_SOUND_URL); // <-- ÏãúÍ∞Ñ Ï¥àÍ≥º Ïãú Ïò§Îãµ ÏÜåÎ¶¨ Ïû¨ÏÉù
            
            const currentQuestion = problemSets[currentProblemSetIndex].questions[currentQuestionInSetIndex];
            incorrectProblems.push(currentQuestion);
            showToast("ÏãúÍ∞Ñ Ï¥àÍ≥º!", false);
            setTimeout(goToNextQuestion, 1500);
        }
    }, 1000);
}


// 
// ... Ïù¥Ìïò setupQuiz, loadProblem, goToNextQuestion, showResults Îì± ÎÇòÎ®∏ÏßÄ Ìï®ÏàòÎì§ÏùÄ Í∏∞Ï°¥Í≥º ÎèôÏùºÌï©ÎãàÎã§ ...
// (ÏïÑÎûò ÏΩîÎìúÎ•º Í∑∏ÎåÄÎ°ú Î≥µÏÇ¨Ìï¥ÏÑú Î∂ôÏó¨ÎÑ£ÏúºÏãúÎ©¥ Îê©ÎãàÎã§)
//

async function setupQuiz() {
    if (isReviewMode) {
        const reviewProblems = JSON.parse(localStorage.getItem('reviewProblems'));
        if (!reviewProblems || reviewProblems.length === 0) {
            alert("Î≥µÏäµÌï† Ïò§Îãµ Î¨∏Ï†úÍ∞Ä ÏóÜÏäµÎãàÎã§. Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ëÎãàÎã§.");
            localStorage.removeItem('isReviewMode');
            localStorage.removeItem('reviewProblems');
            window.location.href = 'index.html';
            return;
        }
        problemSets = groupProblems(reviewProblems);
        loadProblem();
    } else {
        if (!selectedGrade || !selectedSubject) {
            alert("Î®ºÏ†Ä ÌïôÎÖÑÍ≥º Í≥ºÎ™©ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî!");
            window.location.href = 'index.html';
            return;
        }
        try {
            const response = await fetch(GOOGLE_SHEET_URL);
            const tsvText = await response.text();
            const allProblems = parseTsv(tsvText);
            const filteredProblems = allProblems.filter(p => p.ÌïôÎÖÑ === selectedGrade && p.Í≥ºÎ™© === selectedSubject);
            
            problemSets = groupProblems(filteredProblems);
            problemSets = problemSets.sort(() => Math.random() - 0.5).slice(0, selectedCount);

            if (problemSets.length === 0) {
                questionText.textContent = `ÏÑ†ÌÉùÌïòÏã† '${selectedGrade} ${selectedSubject}'Ïóê Ìï¥ÎãπÌïòÎäî Î¨∏Ï†úÍ∞Ä ÏóÜÏäµÎãàÎã§.`;
                return;
            }
            loadProblem();
        } catch (error) {
            console.error('Î¨∏Ï†úÎ•º Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§:', error);
            questionText.textContent = "Î¨∏Ï†úÎ•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏñ¥Ïöî. Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞Ïù¥ÎÇò Íµ¨Í∏Ä ÏãúÌä∏ Ï£ºÏÜåÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî!";
        }
    }
}

function loadProblem() {
    isAnswered = false;
    clearTimeout(timerInterval);
    timerDisplay.textContent = '';
    answerOptions.forEach(button => button.classList.remove('correct-answer', 'incorrect-answer', 'selected'));

    const currentSet = problemSets[currentProblemSetIndex];
    const currentQuestion = currentSet.questions[currentQuestionInSetIndex];

    if (currentSet.type === 'passage') {
        passageArea.style.display = 'block';
        problemArea.style.width = '60%';
        if (currentQuestionInSetIndex === 0) {
            passageContent.textContent = currentSet.questions[0]['ÏßÄÎ¨∏'];
        }
    } else {
        passageArea.style.display = 'none';
        problemArea.style.width = '100%';
    }

    if (currentQuestion.Ïù¥ÎØ∏ÏßÄ && currentQuestion.Ïù¥ÎØ∏ÏßÄ.trim() !== '') {
        questionImage.src = currentQuestion.Ïù¥ÎØ∏ÏßÄ;
        questionImage.style.display = 'block';
    } else {
        questionImage.style.display = 'none';
    }

    questionText.textContent = `[${currentQuestion.Í≥ºÎ™©}] ${currentQuestion.ÏßàÎ¨∏}`;
    const options = [currentQuestion.Î≥¥Í∏∞1, currentQuestion.Î≥¥Í∏∞2, currentQuestion.Î≥¥Í∏∞3, currentQuestion.Î≥¥Í∏∞4]
                    .sort(() => Math.random() - 0.5);
    for (let i = 0; i < answerOptions.length; i++) {
        answerOptions[i].textContent = options[i];
    }
    
    const totalQuestions = problemSets.reduce((sum, set) => sum + set.questions.length, 0);
    const solvedQuestions = problemSets.slice(0, currentProblemSetIndex).reduce((sum, set) => sum + set.questions.length, 0) + currentQuestionInSetIndex + 1;

    questionNumber.textContent = `${solvedQuestions} / ${totalQuestions}`;
    progress.style.width = `${(solvedQuestions / totalQuestions) * 100}%`;

    if (selectedTimer > 0 && !isReviewMode) {
        startTimer(selectedTimer);
    }
}

function goToNextQuestion() {
    const currentSet = problemSets[currentProblemSetIndex];
    if (currentQuestionInSetIndex < currentSet.questions.length - 1) {
        currentQuestionInSetIndex++;
        loadProblem();
    } else {
        currentProblemSetIndex++;
        currentQuestionInSetIndex = 0;
        if (currentProblemSetIndex < problemSets.length) {
            loadProblem();
        } else {
            showResults();
        }
    }
}

function showResults() {
    quizLayout.style.display = 'none';
    resultsContainer.style.display = 'block';

    const scoreText = document.getElementById('score-text');
    const messageText = document.getElementById('message-text');
    const reviewButton = document.getElementById('review-button');
    
    const currentUser = localStorage.getItem('currentUser');
    const totalQuestions = problemSets.reduce((sum, set) => sum + set.questions.length, 0);

    if (!isReviewMode && totalQuestions > 0) {
        const today = new Date();
        const dateString = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
        
        const newRecord = {
            date: dateString,
            grade: selectedGrade,
            subject: selectedSubject,
            score: `${score}/${totalQuestions}`
        };

        let studyData = JSON.parse(localStorage.getItem('studyData')) || {};
        if (!studyData[currentUser]) {
            studyData[currentUser] = { incorrect: [], records: [] };
        }
        if (!studyData[currentUser].records) {
            studyData[currentUser].records = [];
        }
        studyData[currentUser].records.push(newRecord);
        localStorage.setItem('studyData', JSON.stringify(studyData));
    }

    if (!isReviewMode && incorrectProblems.length > 0) {
        let studyData = JSON.parse(localStorage.getItem('studyData')) || {};
        if (!studyData[currentUser]) {
            studyData[currentUser] = { incorrect: [], records: [] };
        }
        if (!studyData[currentUser].incorrect) {
            studyData[currentUser].incorrect = [];
        }
        const existingIncorrect = new Map(studyData[currentUser].incorrect.map(p => [p.ÏßàÎ¨∏, p]));
        incorrectProblems.forEach(p => {
            existingIncorrect.set(p.ÏßàÎ¨∏, p);
        });
        studyData[currentUser].incorrect = Array.from(existingIncorrect.values());
        localStorage.setItem('studyData', JSON.stringify(studyData));
    }
    
    scoreText.textContent = `Ï¥ù ${totalQuestions}Î¨∏Ï†ú Ï§ë ${score}Í∞úÎ•º ÎßûÌòîÏñ¥Ïöî!`;
    const percentage = totalQuestions > 0 ? (score / totalQuestions) * 100 : 100;
    if (percentage >= 80) {
        messageText.textContent = "Ï†ïÎßê ÎåÄÎã®Ìï¥Ïöî! ÌõåÎ•≠Ìïú Ïã§Î†•Ïù¥ÏóêÏöî. üèÜ";
    } else if (percentage >= 50) {
        messageText.textContent = "ÏûòÌñàÏñ¥Ïöî! Ï°∞Í∏àÎßå Îçî ÎÖ∏Î†•Ìï¥Î¥êÏöî. üòä";
    } else {
        messageText.textContent = "ÏïÑÏâ¨ÏõåÏöî, Îã§Ïãú ÌïúÎ≤à ÎèÑÏ†ÑÌï¥Î≥ºÍπåÏöî? üí™";
    }

    const savedIncorrect = JSON.parse(localStorage.getItem('studyData'))?.[currentUser]?.incorrect || [];
    if (savedIncorrect.length === 0) {
        reviewButton.style.display = 'none';
    } else {
        reviewButton.style.display = 'inline-block';
    }

    if (isReviewMode) {
        reviewButton.style.display = 'none';
        localStorage.removeItem('isReviewMode');
        localStorage.removeItem('reviewProblems');
    }
}

function parseTsv(text) {
    const lines = text.split(/\r\n|\n/).slice(1);
    const headers = ['ÌïôÎÖÑ', 'Í≥ºÎ™©', 'ÏßàÎ¨∏', 'Î≥¥Í∏∞1', 'Î≥¥Í∏∞2', 'Î≥¥Í∏∞3', 'Î≥¥Í∏∞4', 'Ï†ïÎãµ', 'Ïù¥ÎØ∏ÏßÄ', 'ÏßÄÎ¨∏ ID', 'ÏßÄÎ¨∏'];
    const data = [];
    for (const line of lines) {
        if (!line) continue;
        const values = line.split('\t');
        const entry = {};
        for (let i = 0; i < headers.length; i++) {
            entry[headers[i]] = values[i];
        }
        data.push(entry);
    }
    return data;
}

function showToast(message, isCorrect) {
    toastMessage.textContent = message;
    toastMessage.className = isCorrect ? 'correct' : 'incorrect';
    toastMessage.classList.add('show');
    setTimeout(() => {
        toastMessage.classList.remove('show');
    }, 1500);
}

setupQuiz();