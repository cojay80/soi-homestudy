name: AI PR Review (OpenAI)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    # 드래프트 PR은 건너뛰고 싶다면 아래 조건을 step에 추가할 수도 있음
  workflow_dispatch:

concurrency:
  group: ai-pr-review-${{ github.ref }}
  cancel-in-progress: true   # 같은 브랜치에서 새 실행이 오면 이전 실행 취소

permissions:
  contents: read
  pull-requests: write


jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ✅ 1) PR diff를 GH CLI로 안전하게 수집 (원격 ref 문제 회피)
      - name: Collect PR diff (safe via gh)
        id: diff
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          gh pr diff ${{ github.event.pull_request.number }} > pr.diff
          echo "Diff size: $(wc -c < pr.diff) bytes"

      # ✅ 2) OpenAI 호출 (성공 시 review.md 생성)
      - name: Review with OpenAI (Korean)
        id: ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, json, sys, urllib.request
          api_key = os.environ["OPENAI_API_KEY"]

          with open("pr.diff","r",encoding="utf-8",errors="ignore") as f:
              diff = f.read()

          MAX = 120000
          if len(diff) > MAX:
              diff = diff[:MAX//2] + "\n...\n# (diff truncated)\n...\n" + diff[-MAX//2:]

          system = "You are a senior full-stack engineer and security reviewer. Reply in Korean with concise bullets. Include a '제안 패치' (unified diff) and 3 test ideas. Label risk (Low/Med/High)."
          user = f"레포: cojay80/soi-homestudy 의 PR diff입니다.\n목표: 버그/보안/성능/스타일/접근성/테스트 관점 리뷰.\nPR Diff:\n{diff}"

          payload = {
              "model": "gpt-4o-mini",
              "temperature": 0.2,
              "messages": [
                  {"role":"system","content": system},
                  {"role":"user","content": user}
              ]
          }

          req = urllib.request.Request(
              "https://api.openai.com/v1/chat/completions",
              data=json.dumps(payload).encode("utf-8"),
              headers={"Authorization": f"Bearer {api_key}", "Content-Type":"application/json"}
          )
          with urllib.request.urlopen(req, timeout=120) as r:
              data = json.loads(r.read().decode("utf-8"))

          review = data["choices"][0]["message"]["content"]
          with open("review.md","w",encoding="utf-8") as f:
              f.write(review)
          print("WROTE review.md")
          PY

      # ✅ 3) review.md가 있을 때만 PR 코멘트 달기
      - name: Post review to PR (only if review exists)
        if: ${{ success() && hashFiles('review.md') != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          gh pr comment ${{ github.event.pull_request.number }} --body-file review.md

      # ✅ 4) 라벨도 review.md가 있을 때만 추가
      - name: Add risk label (only if review exists)
        if: ${{ success() && hashFiles('review.md') != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          label="ai-review:low-risk"
          if grep -qi "High" review.md; then
            label="ai-review:high-risk"
          elif grep -qi "Med" review.md; then
            label="ai-review:medium-risk"
          fi
          gh pr edit ${{ github.event.pull_request.number }} --add-label "$label"
